from matplotlib.backends.backend_pdf import PdfPages
import pandas as pd
from pathlib import Path

def export_pdf(figures, pdf_path: str, metadata: dict | None = None):
    Path(pdf_path).parent.mkdir(parents=True, exist_ok=True)
    with PdfPages(pdf_path) as pdf:
        if metadata:
            info = pdf.infodict()
            if "title" in metadata:  info["Title"] = metadata["title"]
            if "author" in metadata: info["Author"] = metadata["author"]
        for fig in figures:
            pdf.savefig(fig, bbox_inches="tight")

def export_excel(summary_dict: dict[str, pd.DataFrame], xlsx_path: str):
    Path(xlsx_path).parent.mkdir(parents=True, exist_ok=True)
    with pd.ExcelWriter(xlsx_path, engine="xlsxwriter") as writer:
        for sheet, df in summary_dict.items():
            df.to_excel(writer, index=False, sheet_name=sheet)

def export_pngs(figures, out_dir: str):
    d = Path(out_dir)
    d.mkdir(parents=True, exist_ok=True)
    for i, fig in enumerate(figures, 1):
        fig.savefig(d / f"chart_{i:02d}.png", dpi=150, bbox_inches="tight")

# --- Full Excel with formatting ---
def export_excel_full(df: pd.DataFrame, xlsx_path: str, compute_funcs: dict[str, callable], kpi_func: callable):
    Path(xlsx_path).parent.mkdir(parents=True, exist_ok=True)
    with pd.ExcelWriter(xlsx_path, engine="xlsxwriter", datetime_format="yyyy-mm-dd") as writer:
        wb = writer.book
        fmt_title = wb.add_format({"bold": True, "font_size": 14})
        fmt_header = wb.add_format({"bold": True, "bg_color": "#F0F0F0"})
        fmt_money = wb.add_format({"num_format": "#,##0.00"})
        fmt_pct   = wb.add_format({"num_format": "0.00%"})
        fmt_small = wb.add_format({"font_size": 9, "italic": True, "font_color": "#666666"})

        # KPI sheet
        k = kpi_func(df)
        kdf = pd.DataFrame([k])
        kdf.to_excel(writer, sheet_name="KPI", index=False)
        ws = writer.sheets["KPI"]
        ws.write(0, 0, "Key Performance Indicators", fmt_title)
        # Format KPI numbers
        for col_idx, col in enumerate(kdf.columns):
            if "revenue" in col or "profit" in col:
                ws.set_column(col_idx, col_idx, 18, fmt_money)
            elif "margin" in col or "growth" in col:
                ws.set_column(col_idx, col_idx, 14, fmt_pct)
            else:
                ws.set_column(col_idx, col_idx, 14)
        ws.set_row(0, 22)

        # Compute & write other sheets
        for sheet, fn in compute_funcs.items():
            try:
                data = fn(df)
                # Pivot-like tables may have datetime columns; convert to string for header clarity
                if isinstance(data, pd.DataFrame) and any(str(c).startswith("20") for c in data.columns.astype(str)):
                    # leave as is; Excel supports datetime formats
                    pass
                data.to_excel(writer, sheet_name=sheet, index=False)
                ws = writer.sheets[sheet]
                # Header format and column widths
                ws.set_row(0, 18, fmt_header)
                # Auto width (simple heuristic)
                for i, col in enumerate(data.columns):
                    width = max(12, min(40, int(data[col].astype(str).map(len).max() if len(data) else 12)))
                    # money and percent formatting
                    if "sales" in col or "profit" in col:
                        ws.set_column(i, i, width, fmt_money)
                    elif "margin" in col or "growth" in col:
                        ws.set_column(i, i, width, fmt_pct)
                    else:
                        ws.set_column(i, i, width)
                # Conditional formatting for Top/Bottom sheets
                if sheet in ("TopProducts", "BottomProducts") and "profit" in data.columns:
                    col_idx = data.columns.get_loc("profit")
                    ws.conditional_format(1, col_idx, len(data), col_idx, {
                        "type": "3_color_scale",
                        "min_color": "#F8696B",
                        "mid_color": "#FFEB84",
                        "max_color": "#63BE7B",
                    })
                # Add a small footer note
                ws.write(len(data)+2, 0, "Generated by Sales Analytics", fmt_small)
            except Exception as e:
                # fallback sheet with error message
                err = pd.DataFrame([{"error": str(e)}])
                err.to_excel(writer, sheet_name=f"{sheet}_error", index=False)

        # RawValidated & DataDictionary
        # RawValidated may be large; limit column widths
        df.to_excel(writer, sheet_name="RawValidated", index=False)
        ws_raw = writer.sheets["RawValidated"]
        for i, col in enumerate(df.columns):
            width = min(30, max(12, len(str(col)) + 2))
            if col in ("sales_amount","cost","profit"):
                ws_raw.set_column(i, i, width, fmt_money)
            elif col in ("margin",):
                ws_raw.set_column(i, i, width, fmt_pct)
            else:
                ws_raw.set_column(i, i, width)